name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  cleanup:
    runs-on: "self-hosted"
    steps:
      - uses: actions/checkout@v4
      - name: Clean up Docker image
        run: | 
            container=$(docker ps --format "{{.ID}} {{.Names}}" | grep "backend" | cut -d " " -f1)
            container2=$(docker ps --format "{{.ID}} {{.Names}}" | grep "frontend" | cut -d " " -f1)
            if [ -n "$container" ] || [ -n "$container2" ]; then
               docker stop "$container"
               docker stop "$container2"
               docker remove "$container"
               docker remove "$container2"
             else
               echo "no containers"
            fi  
            
  build:
    needs: cleanup
    runs-on: "self-hosted"
    steps:
      - uses: actions/checkout@v4
      - name: Build the backend Docker image
        run: | 
          docker build . --file bomberman-backend/Dockerfile --tag h3-backend-project:latest
      - name: Build the frontend Docker image
        run: |
          cd Bomberman-frontend
          docker build . --file Bomberman-frontend/Dockerfile --tag h3-frontend-project:latest
  create:
    needs: build
    runs-on: "self-hosted"
    steps:
      - uses: actions/checkout@v4
      - name: Create the docker container
        run: | 
          docker create --name backend -p 8080:8080 -e dbcontext="${{ vars.dbcontext }}" h3-backend-project:latest
          docker create --name frontend -p 8081:8080 h3-frontend-project:latest
  logs:
    needs: create
    runs-on: "self-hosted"
    steps:
      - uses: actions/checkout@v4
      - name: Logs the containers
        run: docker ps -a
  publish:
      needs: [create, logs]
      runs-on: "self-hosted"
      steps:
        - uses: actions/checkout@v4
        - name: Start the Docker image
          run: | 
            docker start backend
            docker start frontend
