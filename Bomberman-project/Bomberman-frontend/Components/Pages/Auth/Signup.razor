@using System.ComponentModel.DataAnnotations
@using DomainModels.DTO
@inject HttpClient httpClient
@inject AuthService authService
@inject AuthenticationStateProvider authState
@inject NavigationManager NavigationManager
@page "/Signup"


<h3>Signup</h3>

<EditForm Model="@player" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username" HelperText="Max. 8 characters"
                    @bind-Value="player.userName" For="@(() => player.userName)" />
                    <MudTextField Label="Email" Class="mt-3"
                    @bind-Value="player.email" For="@(() => player.email)" />
                    <MudTextField Label="SessionID" Class="mt-3"
                    @bind-Value="sessionId" For="@(() => sessionId)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                    @bind-Value="player.password" For="@(() => player.password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    CreatePlayerDTO player = new CreatePlayerDTO();
    int sessionId { get; set; }
    bool success;


    private async void OnValidSubmit(EditContext context)
    {
        player.sessionId = new DomainModels.Session()
        {
           Id = sessionId
        };
        // first we will make a post request registering the user and then return a true or false once the user is registered.
        var response = await authService.Register(player);
        success = response.IsSuccessStatusCode;
       

        //Here we instanciate a new LoginDTO object and set the Username and Password to the values from the model.
        LoginDTO loginDTO = new LoginDTO { username = player.userName, password = player.password };

        StateHasChanged();

        //If the user is not registered we will return and not try to login the user.
        if (!success)
        {
            return;
        }

        //If the user is registered we will try to login the user. By calling the login method from the authService.
        var loginResponse = await authService.Login(loginDTO!);
        if (loginResponse != null)
        {
            await ((AuthProvider)authState).AuthenticateUser(loginResponse.Token);
            NavigationManager.NavigateTo("/");
        }
    }
}